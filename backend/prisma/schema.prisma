// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  FOUNDATION
  USER
}

// Modelos
model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  role       UserRole   @default(USER)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  userProfile UserProfile?
  admin Admin?
  foundation Foundation?

  userCampaign userCampaign[]


  donations    Donation[]   //  Un usuario puede tener muchas donaciones

  @@map("user")
}

model UserProfile {
  id         String      @id @default(uuid())
  userId    String   @unique
  description String?
  photoUrl   String?
  phone      String?
  address    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user      User @relation(fields: [userId], references: [id])
  @@map("user_profile")
}



model Admin{
  id      String  @id @default(uuid())
  name    String  @unique
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id])
  @@map("admin")
}

model Foundation {
  id         String      @id @default(uuid())
  name       String      @unique
  description String?
  logo_url   String
  contact_phone    String?
  contact_email    String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @unique

// relation one to many
  campaigns Campaign[]


  donations    Donation[]  // 1:N Donation

  @@map("foundation")
}
model Campaign {
  id         String      @id @default(uuid())
  title      String      @unique
  description String?    
  imageUrl   String?
  start_Date  DateTime   @map("start_date")
  end_Date    DateTime   @map("end_date")
 // Relaci√≥n muchos a muchos con UserCampaign osea user
  userCampaign userCampaign[]

  // relation many to one
  foundationId String       // FK hacia Foundation
  foundation   Foundation   @relation(fields: [foundationId], references: [id])
  
  campaignImage campaignImage[]

  @@map("campaign")
}
// relation many to many
model userCampaign {
  id         String      @id @default(uuid())
  joinDate   DateTime    @map("join_date")

  userId     String      @unique
  campaignId String      @unique
  user       User        @relation(fields: [userId], references: [id])
  campaign   Campaign    @relation(fields: [campaignId], references: [id])
  @@map("user_campaign")
  @@index([userId, campaignId])
}



model Donation {
  id         String      @id @default(uuid())
  amount     Float

  isAnonymous    Boolean      @default(false)
  donorName      String?
  donorEmail     String?

  status         DonationStatus
  paymentMethod  PaymentMethod
  transactionCode String?

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt // only for status change
  userId     String?      @unique
  user       User?        @relation(fields: [userId], references: [id])
  
  foundationId String      @unique // FK hacia Foundation N:1 
  foundation   Foundation   @relation(fields: [foundationId], references: [id])



 @@map("donation")
}
enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
enum PaymentMethod {
  MERCADO_PAGO
  EFECTIVO
  // SANDBOX
}

model campaignImage {
  id         String      @id @default(uuid())
  description String?
  image_Url   String
  campaignId String      @unique 
  campaign   Campaign    @relation(fields: [campaignId], references: [id])
  @@map("campaign_image")
}
